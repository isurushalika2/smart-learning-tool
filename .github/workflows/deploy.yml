name: Deploy Application

on:
  push:
    branches: [ "master" ]
    paths:
      - 'src/**'
      - 'build.gradle.kts'
      - 'settings.gradle.kts'
      - 'frontend/**'
      - '.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend service'
        default: 'true'
        required: true
      deploy_frontend:
        description: 'Deploy frontend static site'
        default: 'true'
        required: true
      method:
        description: 'Deployment method for backend: ssh or ssm-s3'
        default: 'ssh'
        required: true

permissions:
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: ${{ vars.AWS_REGION || 'us-east-1' }}

jobs:
  build:
    name: Build backend and frontend
    runs-on: ubuntu-latest
    outputs:
      jar_path: ${{ steps.backend.outputs.jar_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build backend JAR
        id: backend
        if: github.event_name == 'push' && contains('true', 'true') || github.event.inputs.deploy_backend == 'true'
        run: |
          ./gradlew --no-daemon clean bootJar
          JAR=$(ls -1 build/libs/*.jar | head -n1)
          echo "jar_path=$JAR" >> $GITHUB_OUTPUT

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Build frontend
        if: github.event_name == 'push' && contains('true', 'true') || github.event.inputs.deploy_frontend == 'true'
        working-directory: frontend
        run: |
          npm install --no-audit --no-fund
          npm run build

      - name: Upload built JAR as artifact
        if: steps.backend.outputs.jar_path
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: ${{ steps.backend.outputs.jar_path }}

  deploy-backend-ssh:
    name: Deploy backend via SSH
    needs: build
    if: (github.event_name == 'push' || github.event.inputs.deploy_backend == 'true') && (github.event.inputs.method == 'ssh' || github.event_name == 'push')
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: artifacts

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add known hosts (optional)
        if: ${{ secrets.SSH_KNOWN_HOSTS != '' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Copy JAR to server
        env:
          EC2_HOST: ${{ vars.EC2_HOST }}
          EC2_USER: ${{ vars.EC2_USER || 'ec2-user' }}
        run: |
          JAR=$(ls -1 artifacts/*.jar | head -n1)
          [ -z "$EC2_HOST" ] && echo "EC2_HOST repo variable is required for SSH deploy" && exit 1
          scp -o StrictHostKeyChecking=no "$JAR" "$EC2_USER@$EC2_HOST:/opt/learning-tool/app.jar"

      - name: Restart service
        env:
          EC2_HOST: ${{ vars.EC2_HOST }}
          EC2_USER: ${{ vars.EC2_USER || 'ec2-user' }}
        run: |
          ssh -o StrictHostKeyChecking=no "$EC2_USER@$EC2_HOST" 'sudo systemctl daemon-reload || true; sudo systemctl restart learning-tool || (nohup java -jar /opt/learning-tool/app.jar >/var/log/learning-tool.out 2>&1 &)' 

  deploy-backend-ssm:
    name: Deploy backend via SSM + S3
    needs: build
    if: (github.event_name == 'push' || github.event.inputs.deploy_backend == 'true') && github.event.inputs.method == 'ssm-s3'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Download JAR artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: artifacts

      - name: Upload JAR to S3
        env:
          ARTIFACTS_BUCKET: ${{ vars.ARTIFACTS_BUCKET }}
        run: |
          [ -z "$ARTIFACTS_BUCKET" ] && echo "ARTIFACTS_BUCKET repo variable is required for ssm-s3 deploy" && exit 1
          aws s3 cp artifacts/*.jar s3://$ARTIFACTS_BUCKET/releases/app-${{ github.sha }}.jar --region "${{ env.AWS_REGION }}"

      - name: SSM SendCommand to deploy
        env:
          INSTANCE_ID: ${{ vars.INSTANCE_ID }}
          ARTIFACTS_BUCKET: ${{ vars.ARTIFACTS_BUCKET }}
        run: |
          [ -z "$INSTANCE_ID" ] && echo "INSTANCE_ID repo variable is required for ssm-s3 deploy" && exit 1
          CMD=$(cat <<'EOS'
          set -euxo pipefail
          sudo mkdir -p /opt/learning-tool
          sudo chown ec2-user:ec2-user /opt/learning-tool
          aws s3 cp s3://${ARTIFACTS_BUCKET}/releases/app-${GITHUB_SHA}.jar /opt/learning-tool/app.jar --region ${AWS_REGION}
          sudo systemctl daemon-reload || true
          sudo systemctl restart learning-tool || (nohup java -jar /opt/learning-tool/app.jar >/var/log/learning-tool.out 2>&1 &)
          EOS
          )
          aws ssm send-command \
            --instance-ids "$INSTANCE_ID" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Learning Tool $GITHUB_SHA" \
            --parameters commands="$CMD" \
            --region "${{ env.AWS_REGION }}"

  deploy-frontend:
    name: Deploy frontend to S3
    needs: build
    if: github.event_name == 'push' || github.event.inputs.deploy_frontend == 'true'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download frontend build
        uses: actions/download-artifact@v4
        if: false # frontend build files are still in the workspace of build job; not needed here
        with:
          name: frontend-dist
          path: frontend/dist
      - name: Sync to S3
        env:
          FRONTEND_BUCKET: ${{ vars.FRONTEND_BUCKET }}
        run: |
          [ -z "$FRONTEND_BUCKET" ] && echo "FRONTEND_BUCKET repo variable is not set; skipping" && exit 0
          # Rebuild to get dist in this job's workspace
          sudo apt-get update && sudo apt-get install -y nodejs npm >/dev/null 2>&1 || true
          cd frontend
          npm install --no-audit --no-fund
          npm run build
          aws s3 sync dist/ s3://$FRONTEND_BUCKET/ --delete --region "${{ env.AWS_REGION }}"
